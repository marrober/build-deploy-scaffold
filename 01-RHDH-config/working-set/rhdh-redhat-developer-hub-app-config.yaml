kind: ConfigMap
apiVersion: v1
metadata:
  name: redhat-developer-hub-app-config
  namespace: developer-hub
  uid: 1c35c43c-8656-4414-9847-2e2fe32454d1
  resourceVersion: '4231027'
  creationTimestamp: '2024-07-23T12:22:57Z'
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: redhat-developer-hub
    meta.helm.sh/release-namespace: developer-hub
  managedFields:
    - manager: bridge
      operation: Update
      apiVersion: v1
      time: '2024-07-23T12:42:53Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data': {}
        'f:metadata':
          'f:annotations':
            .: {}
            'f:meta.helm.sh/release-name': {}
            'f:meta.helm.sh/release-namespace': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/managed-by': {}
    - manager: Mozilla
      operation: Update
      apiVersion: v1
      time: '2024-07-29T13:07:32Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data':
          'f:app-config.yaml': {}
data:
  app-config.yaml: |
    app:
      baseUrl: ${GITHUB_APP_WEBHOOK_URL}
    backend:
      auth:
        keys:
        - secret: ${BACKEND_SECRET}
      baseUrl: ${GITHUB_APP_WEBHOOK_URL}
      cors:
        origin: ${GITHUB_APP_WEBHOOK_URL}
      database:
        connection:
          password: ${POSTGRESQL_ADMIN_PASSWORD}
          user: postgres
    integrations:
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB_APP_ID}
              clientId: ${GITHUB_APP_CLIENT_ID}
              clientSecret: ${GITHUB_APP_CLIENT_SECRET}
              webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
              webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
              privateKey: |
                ${GITHUB_APP_PRIVATE_KEY_FILE}
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: ${GITHUB_APP_CLIENT_ID}
            clientSecret: ${GITHUB_APP_CLIENT_SECRET}
    enabled:
      github: true
      githubOrg: true
    proxy:
      '/argocd/api':
        # url to the api of your hosted argoCD instance
        target: ${ARGOCD_ROUTE}/api/v1/
        changeOrigin: true
        # this line is required if your hosted argoCD instance has self-signed certificate
        secure: false
        headers:
          Cookie:
            $env: argocd.token=${ARGOCD_TOKEN}
    argocd:
      username: admin
      password: ${ARGOCD_PASSWORD}
      appLocatorMethods:
      - instances:
        - name: argocd
          username: admin
          url: ${ARGOCD_ROUTE}
          token: ${ARGOCD_TOKEN}
          baseUrl: https://argocd-server-openshift-gitops.apps.cluster-vhdnd.sandbox2089.opentlc.com
          proxy: '/argocd/api'
        type: config
    catalog:
      providers:
        githubOrg:
          id: development
          githubUrl: "${GITHUB_ORG_URL}"
          orgs: [ "${GITHUB_AUTH_ORG}" ]
      locations:
      - rules:
        - allow:
          - Template
        target: https://github.com/marrober/build-deploy-scaffold/blob/main/01-RHDH-config/showcase-templates.yaml
        type: url
      - rules:
        - allow:
          - Group
          - User
        target: https://github.com/marrober/build-deploy-scaffold/blob/main/01-RHDH-config/org.yaml
        type: url
      - rules:
        - allow:
          - Component
          - System
          - API
          - Resource
          - Location
          - Template
        target: https://github.com/marrober/build-deploy-scaffold/blob/main/01-RHDH-config/catalogs.yaml
        type: url
    kubernetes:
      clusterLocatorMethods:
      - clusters:
        - authProvider: serviceAccount
          name: dev-cluster-infra
          serviceAccountToken: <token>
          skipTLSVerify: true
          url: https://api.cluster-vhdnd.sandbox2089.opentlc.com:6443
        type: config
      customResources:
      - apiVersion: v1beta1
        group: tekton.dev
        plural: pipelineruns
      - apiVersion: v1beta1
        group: tekton.dev
        plural: taskruns
      - apiVersion: v1
        group: route.openshift.io
        plural: routes
      serviceLocatorMethod:
        type: multiTenant
